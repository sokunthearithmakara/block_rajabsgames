{"version":3,"file":"block_main.min.js","sources":["../src/block_main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module block_main\n *\n * @module     block_rajabsgames/block_main\n * @copyright  2025 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport ModalForm from 'core_form/modalform';\nimport Template from 'core/templates';\n\nexport const init = async(blockid, contextid, courseid, userid) => {\n    // Add a class to the body to indicate that the block is active.\n    let string = await import('core/str');\n\n    const bindEvents = (event, selector, func) => {\n        // Bind click event to the \"Add Badge\" button.\n        $(document).off(event, selector).on(event, selector, func);\n    };\n\n    bindEvents('click', '#add-badge', async function() {\n        // Open the modal to add a badge.\n        let data = {\n            contextid,\n            courseid,\n            userid,\n            blockid\n        };\n\n        const form = new ModalForm({\n            modalConfig: {\n                title: await string.get_string('addbadge', 'block_rajabsgames'),\n            },\n            formClass: \"block_rajabsgames\\\\badge_form\",\n            args: data,\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.FORM_SUBMITTED, async(event) => {\n            $('.rg_badges_list .empty-message').remove();\n            let response = event.detail;\n            let badge = await Template.render('block_rajabsgames/badge', {\n                badges: [\n                    {\n                        id: response.badgeid,\n                        name: response.badge_name,\n                        picture: response.url,\n                    }\n                ],\n            });\n            // Append the new badge to the badges list.\n            $('.rg_badges_list').append(badge);\n            let badges = JSON.parse($('[name=config_badges]').val() || '[]');\n            // Add the new badge to the badges array.\n            if (!Array.isArray(badges)) {\n                badges = [];\n            }\n            badges.push({\n                id: response.badgeid,\n                name: response.badge_name,\n                picture: response.url,\n            });\n            // Update the hidden input with the new badges array.\n            $('[name=config_badges]').val(JSON.stringify(badges));\n        });\n    });\n\n    bindEvents('click', '.delete-badge', async function() {\n        // Delete the badge.\n        let badgeid = $(this).data('id');\n        $('.rg_badge_item[data-id=\"' + badgeid + '\"]').remove();\n        // Update the config_badges\n        let badges = JSON.parse($('[name=config_badges]').val() || '[]');\n        badges = badges.filter(badge => badge.id !== badgeid);\n        $('[name=config_badges]').val(JSON.stringify(badges));\n    });\n\n    bindEvents('click', '.edit-badge', async function() {\n        // Open the modal to edit a badge.\n        let badgeid = $(this).data('id');\n        let badges = JSON.parse($('[name=config_badges]').val() || '[]');\n        let badge = badges.find(badge => badge.id === badgeid);\n        let url = badge.picture;\n        let used = $(this).data('used');\n        let draftid = url.match(/user\\/draft\\/(\\d+)/);\n        if (draftid) {\n            draftid = draftid[1];\n        } else {\n            draftid = '';\n        }\n        let data = {\n            contextid,\n            courseid,\n            userid,\n            blockid,\n            badgeid: badge.id,\n            \"badge_name\": badge.name,\n            url,\n            draftid,\n        };\n\n        const form = new ModalForm({\n            modalConfig: {\n                title: await string.get_string('addbadge', 'block_rajabsgames'),\n            },\n            formClass: \"block_rajabsgames\\\\badge_form\",\n            args: data,\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.FORM_SUBMITTED, async(event) => {\n\n            let response = event.detail;\n            // Update the badge.\n            let badgedata = {\n                id: response.badgeid,\n                name: response.badge_name,\n                picture: response.url,\n            };\n            badges = badges.filter(badge => badge.id !== badgeid);\n            badges.push(badgedata);\n            // Sort badges by id.\n            badges.sort((a, b) => a.id - b.id);\n            $('[name=config_badges]').val(JSON.stringify(badges));\n\n            // Replace badge in the UI;\n            badgedata.used = used;\n            let badge = await Template.render('block_rajabsgames/badge', {\n                badges: [\n                    badgedata\n                ],\n            });\n            $('.rg_badge_item[data-id=\"' + badgeid + '\"]').replaceWith(badge);\n\n        });\n    });\n\n    bindEvents('click', '#add-level', async function() {\n        // Open the modal to add a level.\n        let data = {\n            contextid,\n            courseid,\n            userid,\n            blockid,\n            order: 1\n        };\n\n        let form = new ModalForm({\n            modalConfig: {\n                title: await string.get_string('addlevel', 'block_rajabsgames'),\n            },\n            formClass: \"block_rajabsgames\\\\level_form\",\n            args: data,\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.FORM_SUBMITTED, async(event) => {\n\n            let response = event.detail;\n            let leveldata = {\n                id: response.levelid,\n                name: response.level_name,\n                order: response.order,\n                xp: response.xplimit\n            };\n\n            let levels = JSON.parse($('[name=config_levels]').val() || '[]');\n            // Add the new level to the levels array.\n            if (!Array.isArray(levels)) {\n                levels = [];\n            }\n            levels.push(leveldata);\n            // Sort the levels array by order.\n            levels.sort((a, b) => a.xp - b.xp);\n            // Change order value.\n            for (let i = 0; i < levels.length; i++) {\n                levels[i].order = i + 1;\n            }\n            let level = await Template.render('block_rajabsgames/level', {\n                levels,\n            });\n            // Append the new level to the levels list.\n            $('.rg_level_list').empty().append(level);\n            // Update the hidden input with the new badges array.\n            $('[name=config_levels]').val(JSON.stringify(levels));\n        });\n    });\n\n    bindEvents('click', '.delete-level', async function() {\n        // Delete the level.\n        let levelid = $(this).data('id');\n        // Update the config_levels\n        let levels = JSON.parse($('[name=config_levels]').val() || '[]');\n        levels = levels.filter(level => level.id !== levelid);\n        // Sort the levels array by order.\n        levels.sort((a, b) => a.order - b.order);\n        // Change order value.\n        for (let i = 0; i < levels.length; i++) {\n            levels[i].order = i + 1;\n        }\n        let level = await Template.render('block_rajabsgames/level', {\n            levels,\n        });\n        // Append the new level to the levels list.\n        $('.rg_level_list').empty().append(level);\n        $('[name=config_levels]').val(JSON.stringify(levels));\n    });\n\n    bindEvents('click', '.edit-level', async function() {\n        // Open the modal to edit a level.\n        let levelid = $(this).data('id');\n        let levels = JSON.parse($('[name=config_levels]').val() || '[]');\n        let level = levels.find(level => level.id === levelid);\n        let data = {\n            contextid,\n            courseid,\n            userid,\n            blockid,\n            order: level.order,\n            levelid: level.id,\n            \"level_name\": level.name,\n            xplimit: level.xp,\n        };\n\n        let form = new ModalForm({\n            modalConfig: {\n                title: await string.get_string('editlevel', 'block_rajabsgames'),\n            },\n            formClass: \"block_rajabsgames\\\\level_form\",\n            args: data,\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.FORM_SUBMITTED, async(event) => {\n            let response = event.detail;\n            levels = levels.filter(level => level.id !== levelid);\n            let leveldata = {\n                id: response.levelid,\n                name: response.level_name,\n                order: response.order,\n                xp: response.xplimit\n            };\n            levels.push(leveldata);\n            // Sort the levels array by order.\n            levels.sort((a, b) => a.xp - b.xp);\n            // Change order value.\n            for (let i = 0; i < levels.length; i++) {\n                levels[i].order = i + 1;\n            }\n            let level = await Template.render('block_rajabsgames/level', {\n                levels,\n            });\n            // Append the new level to the levels list.\n            $('.rg_level_list').empty().append(level);\n            // Update the hidden input with the new badges array.\n            $('[name=config_levels]').val(JSON.stringify(levels));\n        });\n    });\n\n\n};\n"],"names":["async","blockid","contextid","courseid","userid","string","bindEvents","event","selector","func","document","off","on","data","form","ModalForm","modalConfig","title","get_string","formClass","args","show","addEventListener","events","FORM_SUBMITTED","remove","response","detail","badge","Template","render","badges","id","badgeid","name","badge_name","picture","url","append","JSON","parse","val","Array","isArray","push","stringify","this","filter","find","used","draftid","match","badgedata","sort","a","b","replaceWith","order","leveldata","levelid","level_name","xp","xplimit","levels","i","length","level","empty"],"mappings":"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"}