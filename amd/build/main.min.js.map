{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module main\n *\n * @module     block_rajabsgames/main\n * @copyright  2025 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nimport DynamicForm from 'core_form/dynamicform';\nimport Template from 'core/templates';\nimport {renderAnnotationItems} from 'mod_interactivevideo/viewannotation';\n\nexport default class RajabsGames extends Base {\n    /**\n     * Initializes the decision plugin for interactive videos.\n     *\n     * This method sets up event listeners and handles the logic for decision points\n     * within the video. If the video is not in edit mode, it filters out decision\n     * annotations and prevents skipping certain decision points based on their\n     * properties.\n     *\n     * @method init\n     */\n    async init() {\n        let self = this;\n\n        if (!this.isEditMode() && !this.isPreviewMode()) {\n            const games = this.annotations.find(x => x.type == 'rajabsgames');\n            if (!games) {\n                return;\n            }\n\n            // Get the config data.\n            let block = await $.ajax({\n                url: M.cfg.wwwroot + '/blocks/rajabsgames/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_badges',\n                    sesskey: M.cfg.sesskey,\n                    courseid: self.course,\n                }\n            });\n\n            let badges = games.content;\n            badges = JSON.parse(badges || '[]');\n\n            let progress = await $.ajax({\n                url: M.cfg.wwwroot + '/blocks/rajabsgames/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_completiondetails',\n                    sesskey: M.cfg.sesskey,\n                    courseid: self.course,\n                    cmid: self.interaction,\n                    userid: self.userid\n                }\n            });\n            progress = JSON.parse(progress || '[]');\n            progress = JSON.parse(progress || '[]');\n            progress = progress.map(x => JSON.parse(x));\n            progress = progress.find(x => x.id == games.id);\n            progress = progress ? progress.gameprogress || [] : [];\n\n            if (badges.length == 0) {\n                return;\n            }\n\n            let badgeconfig = JSON.parse(block);\n            badgeconfig = JSON.parse(badgeconfig || '[]');\n\n            badges = badges.map(badge => {\n                badge.isblock = true;\n                badge.unused = false;\n                let badgedata = badgeconfig.find(x => x.id == badge.badgeid);\n                if (badgedata) {\n                    badge.name = badgedata.name;\n                    badge.picture = badgedata.picture;\n                    badge.id = badgedata.id;\n                }\n                if (progress.find(x => x.name == badge.uniqueid)) {\n                    badge.completed = true;\n                }\n                return badge;\n            });\n\n            // Badges for status: unique badges based on id.\n            if (games.intg2 == 1) {\n                let badgesforstatus = [];\n                badges.forEach(badge => {\n                    badge = JSON.parse(JSON.stringify(badge));\n                    if (!badgesforstatus.find(x => x.id == badge.id)) {\n                        badgesforstatus.push(badge);\n                    }\n                });\n\n                badgesforstatus = badgesforstatus.map(badge => {\n                    badge.mine = progress.filter(x => x.id == badge.id).length;\n                    badge.badgecount = badges.filter(x => x.id == badge.id).length;\n                    badge.completed = badge.mine == badge.badgecount;\n                    badge.classes = badge.mine < badge.badgecount || badge.badgecount == 0 ? 'filter' : '';\n                    return badge;\n                });\n\n                let status = await Template.render('block_rajabsgames/status', {\n                    badges: badgesforstatus,\n                });\n\n                $('.navbar .navigation').prepend(status);\n                $('[data-region=\"chapterwrapper\"] > div').append(status);\n            }\n\n            // Check progress for non-existing badges and remove them.\n            progress = progress.filter(x => badges.find(y => y.uniqueid == x.name));\n\n            let cummulatedXP = 0;\n            progress.forEach(x => {\n                cummulatedXP += Number(x.xp);\n            });\n\n            let incompletedBadges = badges.filter(x => !x.completed);\n\n            if (incompletedBadges.length == 0) {\n                return;\n            }\n\n            let badgeHTML = await Template.render('block_rajabsgames/badge', {\n                badges: incompletedBadges,\n            });\n\n            // Put the html to each badge.\n            let $badgeHTML = $('<div>' + badgeHTML + '</div>');\n            incompletedBadges = incompletedBadges.map(x => {\n                let $el = $badgeHTML.find(`[data-id=\"${x.id}\"]`);\n                $el = $el.clone();\n                $el.addClass('pulse-sm jellyIn');\n                $el.attr('data-name', x.uniqueid);\n                $el.attr('data-xp', x.xp);\n                if (x.xp > 0) {\n                    $el.append(`<small class=\"text-muted\">\n                        ${x.xp} <sup>${M.util.get_string('xp', 'block_rajabsgames')}</sup></small>`);\n                }\n                x.html = $el.prop('outerHTML');\n                x.classes = self.getPosition(x.position);\n                return x;\n            });\n\n            $(document).off('timeupdate.games').on('timeupdate.games', async function(e) {\n                const t = Number(e.originalEvent.detail.time);\n                const badge = incompletedBadges.find(x => x.timestamp <= t && x.timestamp + 5 >= t && !x.completed);\n                let isEmpty = $('.video-block').find('li').length == 0;\n                if (!badge && !isEmpty) {\n                    $('.video-block').empty();\n                    // Remove all classes.\n                    $('.video-block').attr('class', 'video-block');\n                    return;\n                }\n                if ($(`.video-block li`).length > 0) {\n                    return;\n                }\n                // If there is a matching badge on timestamp, show it.\n                if (badge) {\n                    $('.video-block').empty();\n                    // Remove all classes.\n                    $('.video-block').attr('class', 'video-block');\n                    $('.video-block').addClass(badge.classes + ' p-2');\n                    $('.video-block').append(badge.html);\n                    if (games.intg3 == 1) {\n                        // Pause the video.\n                        self.player.pause();\n                    }\n                }\n            });\n\n            // Claim the badge.\n            $(document).off('click', '.video-block li').on('click', '.video-block li', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n\n                // Update the status bar.\n                if (games.intg2 == 1) {\n                    let bdg = $(document).find('.rg_badgestatus_item[data-id=\"' + $(this).attr('data-id') + '\"]');\n                    if (bdg.length > 0) {\n                        let count = bdg.find('.badge-count');\n                        count.attr('data-count', Number(count.attr('data-count')) + 1);\n                        if (count.attr('data-count') == count.attr('data-total')) {\n                            bdg.find('img').removeClass('filter');\n                        }\n                        bdg.find('img').addClass('jellyIn');\n                        setTimeout(() => {\n                            bdg.find('img').removeClass('jellyIn');\n                        }, 300);\n                        count.text(count.attr('data-count'));\n                    }\n                }\n\n                // Fire the confetti.\n                window.fireConfetti();\n\n                // Update the progress to database.\n                let details = {};\n                const completeTime = new Date();\n                let windowAnno = window.ANNOS.find(x => x.id == games.id);\n                details.xp = cummulatedXP + Number($(this).data('xp'));\n                cummulatedXP = details.xp;\n                details.duration = windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime);\n                details.timecompleted = completeTime.getTime();\n                details.hasDetails = false;\n                progress.push({\n                    id: $(this).data('id'),\n                    xp: $(this).data('xp'),\n                    name: $(this).data('name'),\n                });\n\n                details.gameprogress = progress;\n                details.completed = details.xp == games.xp;\n                self.toggleCompletion(games.id, 'automatic', details);\n                self.addNotification(M.util.get_string('xpearned', 'mod_interactivevideo', Number($(this).data('xp'))), 'success');\n\n                $(this).removeClass('jellyIn').addClass('jellyIn').fadeOut(300, () => {\n                    $(this).remove();\n                });\n\n                // Remove the badge from the list.\n                incompletedBadges = incompletedBadges.filter(x => x.uniqueid != $(this).data('name'));\n                if (incompletedBadges.length == 0) {\n                    // Stop the timeupdate.games event.\n                    $(document).off('timeupdate.games');\n                }\n            });\n\n        }\n    }\n\n    /**\n     * Toggle completion of an item\n     * @param {number} id The annotation id\n     * @param {string} type The type of completion (manual, automatic)\n     * @param {{}} [details={}] Completion details\n     * @returns {Promise}\n     */\n    toggleCompletion(id, type = 'automatic', details = {}) {\n        let self = this;\n        // Skip if the page is the interactions page or in preview-mode.\n        if (self.isEditMode()) {\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        if (self.isPreviewMode()) {\n            self.addNotification(M.util.get_string('completionnotrecordedinpreviewmode', 'mod_interactivevideo'));\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n\n        // Get existing progress so far.\n        const gradableitems = self.annotations.filter(x => x.hascompletion == '1');\n        const totalXp = gradableitems.map(({xp}) => Number(xp)).reduce((a, b) => a + b, 0);\n        let completedItems = gradableitems.filter(({completed}) => completed);\n        let earnedXp = completedItems.map(({earned}) => Number(earned)).reduce((a, b) => a + b, 0);\n\n        completedItems = completedItems.map(({id}) => id);\n\n        // Prepare details.\n        let thisItem = gradableitems.find(({id: itemId}) => itemId == id);\n        let completionDetails = {\n            id,\n        };\n        const completeTime = new Date();\n        completionDetails.hasDetails = details.details ? true : false;\n        if (details.hasDetails) {\n            completionDetails.hasDetails = true;\n        }\n        completionDetails.xp = details.xp || thisItem.xp;\n        completionDetails.timecompleted = details.timecompleted || completeTime.getTime();\n        const completiontime = completeTime.toLocaleString();\n        completionDetails.gameprogress = details.gameprogress || [];\n        completionDetails.reportView = details.reportView ||\n            `<span data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\" data${self.isBS5 ? '-bs' : ''}-html=\"true\"\n                 title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar iv-mr-2\"></i>\n                 ${completiontime}</span></span>'>\n                 <i class=\"fa fa-${details.completed ? 'check text-success' : 'circle-o text-secondary'} \"></i><br>\n                 <span>${Number(completionDetails.xp)}</span></span>`;\n        if (details.completed) {\n            completedItems.push(id.toString());\n        }\n        if (thisItem.earned > 0) { // In case of resubmission.\n            // Remove the earned XP from the total XP.\n            earnedXp -= Number(thisItem.earned);\n        }\n        earnedXp += Number(completionDetails.xp);\n\n        // Make sure the completed items are unique.\n        completedItems = [...new Set(completedItems)];\n\n        let completed;\n        if (Number(self.completionpercentage) > 0) { // Completion percentage is set.\n            completed = (completedItems.length / gradableitems.length) * 100 >= Number(self.completionpercentage) ? 1 : 0;\n        } else {\n            completed = gradableitems.length == completedItems.length ? 1 : 0;\n        }\n        return new Promise((resolve) => {\n            $.ajax({\n                url: `${M.cfg.wwwroot}/mod/interactivevideo/ajax.php`,\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'save_progress',\n                    markdone: 'mark-done',\n                    sesskey: M.cfg.sesskey,\n                    id: self.interaction,\n                    uid: self.userid,\n                    percentage: (completedItems.length / gradableitems.length) * 100,\n                    g: parseFloat((earnedXp / totalXp) * self.grademax).toFixed(2),\n                    gradeiteminstance: self.gradeiteminstance,\n                    c: completed,\n                    xp: earnedXp,\n                    completeditems: JSON.stringify(completedItems),\n                    completiondetails: JSON.stringify(completionDetails),\n                    details: JSON.stringify(details.details || {}),\n                    annotationtype: thisItem.type,\n                    token: self.token,\n                    cmid: self.cm,\n                    completionid: self.completionid,\n                    contextid: thisItem.contextid,\n                    updatestate: self.completionpercentage > 0 || Object.keys(self.extracompletion).length != 0 ? 1 : 0,\n                    courseid: self.course,\n                },\n                success: (res) => {\n                    // Update the annotations array.\n                    const annotations = self.annotations.map(x => {\n                        if (x.id == id) {\n                            x.completed = details.completed ? true : 'pending';\n                            x.earned = completionDetails.xp || 0;\n                        }\n                        return x;\n                    });\n\n                    renderAnnotationItems(annotations, self.start, self.end - self.start);\n                    thisItem.earned = completionDetails.xp || 0;\n                    // Play a popup sound.\n                    let audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/point-awarded.mp3');\n                    audio.play();\n                    self.dispatchEvent('completionupdated', {\n                        annotations,\n                        completionpercentage: (completedItems.length / gradableitems.length) * 100,\n                        grade: parseFloat((earnedXp / totalXp) * self.grademax).toFixed(2),\n                        completed,\n                        xp: earnedXp,\n                        completeditems: completedItems,\n                        target: thisItem,\n                        action: 'mark-done',\n                        type,\n                        response: res,\n                    });\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Add an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} timestamp The timestamp\n     * @param {number} coursemodule The course module id\n     * @returns {void}\n     */\n    addAnnotation(annotations, timestamp, coursemodule) {\n        $('#addcontent, #importcontent').addClass('no-pointer-events');\n        let self = this;\n        this.annotations = annotations;\n\n        const startHMS = self.convertSecondsToHMS(self.start);\n        const endHMS = self.convertSecondsToHMS(self.end);\n        const timestampHMS = timestamp > 0 ? self.convertSecondsToHMS(timestamp) : startHMS;\n\n        const data = {\n            id: 0,\n            timestamp: -1,\n            timestampassist: timestampHMS,\n            title: self.prop.title,\n            start: startHMS,\n            end: endHMS,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n        };\n\n        $('#annotationwrapper table').hide();\n        $('#annotationwrapper').append('<div id=\"form\" class=\"w-100 p-3\"></div>');\n        $(\"#contentmodal\").modal('hide');\n        $('#addcontentdropdown a').removeClass('active');\n\n        const selector = document.querySelector(`#annotationwrapper #form`);\n        const decisionform = new DynamicForm(selector, self.prop.form);\n        decisionform.load(data);\n\n        self.onEditFormLoaded(decisionform);\n        self.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n        $(document).off('click', '#cancel-submit').on('click', '#cancel-submit', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            $('#annotationwrapper #form').remove();\n            $('#annotationwrapper table').show();\n            $('#addcontent, #importcontent').removeClass('no-pointer-events');\n            // Remove preview.\n            $('#annotation-canvas #badge-preview').remove();\n        });\n\n        $(document).off('click', '#submitform-submit').on('click', '#submitform-submit', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            const event = decisionform.trigger(decisionform.events.SUBMIT_BUTTON_PRESSED);\n            if (!event.defaultPrevented) {\n                decisionform.submitFormAjax();\n            }\n            // Remove preview.\n            $('#annotation-canvas #badge-preview').remove();\n        });\n\n        decisionform.addEventListener(decisionform.events.SERVER_VALIDATION_ERROR, (e) => {\n            e.stopImmediatePropagation();\n            self.onEditFormLoaded(decisionform);\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n        });\n\n        decisionform.addEventListener(decisionform.events.FORM_SUBMITTED, (e) => {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: function(data) {\n                    const newAnnotation = JSON.parse(data);\n                    self.dispatchEvent('annotationupdated', {\n                        annotation: newAnnotation,\n                        action: 'add'\n                    });\n                }\n            });\n            $('#annotationwrapper #form').remove();\n            $('#annotationwrapper table').show();\n            $('#addcontent, #importcontent').removeClass('no-pointer-events');\n        });\n    }\n\n    /**\n     * Edit an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    editAnnotation(annotations, id) {\n        // Disable pointer events on some DOMs.\n        $('#addcontent, #importcontent').addClass('no-pointer-events');\n        this.annotations = annotations;\n        let self = this;\n        const annotation = annotations.find(x => x.id == id);\n        const timestamp = annotation.timestamp;\n        const timestampassist = this.convertSecondsToHMS(timestamp);\n\n        annotation.timestampassist = timestampassist;\n        annotation.start = this.convertSecondsToHMS(this.start);\n        annotation.end = this.convertSecondsToHMS(this.end);\n        annotation.contextid = M.cfg.contextid;\n\n        $('#annotationwrapper table').hide();\n        $('#annotationwrapper').append('<div id=\"form\" class=\"w-100 p-3\"></div>');\n        const selector = document.querySelector(`#annotationwrapper #form`);\n        const decisionform = new DynamicForm(selector, self.prop.form);\n        decisionform.load(annotation);\n\n        self.onEditFormLoaded(decisionform);\n        self.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n        $(document).off('click', '#cancel-submit').on('click', '#cancel-submit', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            $('#annotationwrapper #form').remove();\n            $('#annotationwrapper table').show();\n            $('#addcontent, #importcontent').removeClass('no-pointer-events');\n            // Remove preview.\n            $('#annotation-canvas #badge-preview').remove();\n        });\n\n        $(document).off('click', '#submitform-submit').on('click', '#submitform-submit', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            const event = decisionform.trigger(decisionform.events.SUBMIT_BUTTON_PRESSED);\n            if (!event.defaultPrevented) {\n                decisionform.submitFormAjax();\n            }\n            // Remove preview.\n            $('#annotation-canvas #badge-preview').remove();\n        });\n\n        decisionform.addEventListener(decisionform.events.SERVER_VALIDATION_ERROR, (e) => {\n            e.stopImmediatePropagation();\n            self.onEditFormLoaded(decisionform);\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n        });\n\n        decisionform.addEventListener(decisionform.events.FORM_SUBMITTED, (e) => {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            this.annotations = this.annotations.filter(x => x.id != id);\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n            }).done(function(data) {\n                const updated = JSON.parse(data);\n                self.dispatchEvent('annotationupdated', {\n                    annotation: updated,\n                    action: 'edit'\n                });\n            });\n            $('#annotationwrapper #form').remove();\n            $('#annotationwrapper table').show();\n            $('#addcontent, #importcontent').removeClass('no-pointer-events');\n        });\n    }\n\n    /**\n     * Get the position of the element.\n     * @param {String} position The position.\n     * @returns {String} The position.\n     */\n    getPosition(position = 'centercenter') {\n        let classes = '';\n        switch (position) {\n            case 'top-left':\n                classes = 'align-items-start justify-content-start';\n                break;\n            case 'top-center':\n                classes = 'align-items-start justify-content-center';\n                break;\n            case 'top-right':\n                classes = 'align-items-start justify-content-end';\n                break;\n            case 'center-left':\n                classes = 'align-items-center justify-content-start';\n                break;\n            case 'center-center':\n                classes = 'align-items-center justify-content-center';\n                break;\n            case 'center-right':\n                classes = 'align-items-center justify-content-end';\n                break;\n            case 'bottom-left':\n                classes = 'align-items-end justify-content-start';\n                break;\n            case 'bottom-center':\n                classes = 'align-items-end justify-content-center';\n                break;\n            case 'bottom-right':\n                classes = 'align-items-end justify-content-end';\n                break;\n            default:\n                break;\n        }\n        return classes;\n    }\n\n    /**\n     * Handles the loading of the edit form and initializes the destination list.\n     *\n     * @param {HTMLElement} form - The form element that is being edited.\n     * @param {Event} event - The event that triggered the form load.\n     * @returns {Object} An object containing the form and event.\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        let body = $('#annotationwrapper #form');\n        let positions = [\n            {\n                'name': 'top-left',\n                'label': M.util.get_string('topleft', 'block_rajabsgames'),\n            },\n            {\n                'name': 'top-center',\n                'label': M.util.get_string('topcenter', 'block_rajabsgames'),\n            },\n            {\n                'name': 'top-right',\n                'label': M.util.get_string('topright', 'block_rajabsgames'),\n            },\n            {\n                'name': 'center-left',\n                'label': M.util.get_string('centerleft', 'block_rajabsgames'),\n            },\n            {\n                'name': 'center-center',\n                'label': M.util.get_string('centercenter', 'block_rajabsgames'),\n                'selected': 'selected'\n            },\n            {\n                'name': 'center-right',\n                'label': M.util.get_string('centerright', 'block_rajabsgames'),\n            },\n            {\n                'name': 'bottom-left',\n                'label': M.util.get_string('bottomleft', 'block_rajabsgames'),\n            },\n            {\n                'name': 'bottom-center',\n                'label': M.util.get_string('bottomcenter', 'block_rajabsgames'),\n            },\n            {\n                'name': 'bottom-right',\n                'label': M.util.get_string('bottomright', 'block_rajabsgames'),\n            }\n        ];\n        const checkContentField = () => {\n            if ($('[name=content]').length > 0) {\n                let dest = $('[name=content]').val();\n                let badgeoptions = $('[name=badges]').val();\n                if (badgeoptions) {\n                    badgeoptions = JSON.parse(badgeoptions);\n                } else {\n                    badgeoptions = [];\n                }\n                if (dest == '' || JSON.parse(dest).length == 0) {\n                    $('#destination-list').append(`<div class=\"input-group mb-1 d-none\">\n                <input type=\"text\" class=\"uniqueid form-control\" value=\"\"\n                     placeholder=\"${M.util.get_string('uniquename', 'block_rajabsgames')}\">\n                <select class=\"custom-select form-select badgeoption\">\n                <option value=\"\">${M.util.get_string('selectabadge', 'block_rajabsgames')}</option>\n                        ${badgeoptions.map((badge) => {\n                        return `<option value=\"${badge.id}\">${badge.name}</option>`;\n                    }).join('')}\n                </select>\n                <select class=\"custom-select form-select positionoption\">\n                        ${positions.map((position) => {\n                        return `<option value=\"${position.name}\" ${position.selected}>${position.label}</option>`;\n                    }).join('')}\n                </select>\n                <input type=\"text\" class=\"form-control xp\" value=\"0\" placeholder=\"${M.util.get_string('xp', 'block_rajabsgames')}\">\n                <input type=\"text\" value=\"${this.convertSecondsToHMS(this.start)}\"\n                placeholder=\"00:00:00\" style=\"max-width: 120px;\" class=\"form-control timestamp-input\"\n                 title=\"${M.util.get_string('rightclicktousecurrenttime', 'block_rajabsgames')}\">\n                <div class=\"input-group-append\">\n                <button class=\"btn goto-dest btn-secondary px-2\" type=\"button\"><i class=\"bi bi-play-fill fs-25px\"></i></button>\n                <button class=\"btn add-dest btn-secondary\" type=\"button\"><i class=\"bi bi-plus-lg fs-unset\"></i></button>\n                <button class=\"btn btn-danger delete-dest disabled\" disabled type=\"button\">\n                    <i class=\"bi bi-trash3-fill fs-unset\"></i></button></div></div>`);\n                } else {\n                    dest = JSON.parse(dest);\n                    dest.forEach((d, i) => {\n                        $('#destination-list').append(`<div class=\"input-group mb-1\">\n                    <input type=\"text\" class=\"uniqueid form-control\" value=\"${d.uniqueid}\"\n                     placeholder=\"${M.util.get_string('uniquename', 'block_rajabsgames')}\">\n                    <select class=\"custom-select form-select badgeoption\">\n                        <option value=\"\">${M.util.get_string('selectabadge', 'block_rajabsgames')}</option>\n                                ${badgeoptions.map((badge) => {\n                            return `<option value=\"${badge.id}\" ${badge.id == d.badgeid ? 'selected' : ''}>${badge.name}</option>`;\n                        }).join('')}\n                        </select>\n                    <select class=\"custom-select form-select positionoption\">\n                            ${positions.map((position) => {\n                            return `<option value=\"${position.name}\"\n                             ${position.name == d.position ? 'selected' : ''}>${position.label}</option>`;\n                        }).join('')}\n                    </select>\n                    <input type=\"text\" class=\"form-control xp\" value=\"${d.xp || 0}\"\n                     placeholder=\"${M.util.get_string('xp', 'block_rajabsgames')}\">\n                    <input type=\"text\" value=\"${this.convertSecondsToHMS(d.timestamp)}\"\n                    placeholder=\"00:00:00\" style=\"max-width: 120px;\" class=\"form-control timestamp-input\"\n                     title=\"${M.util.get_string('rightclicktousecurrenttime', 'block_rajabsgames')}\">\n                    <div class=\"input-group-append\">\n                    <button class=\"btn goto-dest btn-secondary px-2\" type=\"button\"><i class=\"bi bi-play-fill fs-25px\"></i></button>\n                    <button class=\"btn add-dest btn-secondary\" type=\"button\"><i class=\"bi bi-plus-lg fs-unset\"></i></button>\n                    <button class=\"btn btn-danger delete-dest ${i == 0 ? 'disabled' : ''}\" ${i == 0 ? 'disabled' : ''}\n                    type=\"button\"><i class=\"bi bi-trash3-fill fs-unset\"></i></button></div></div>`);\n                    });\n                    $('.input-group [type=\"text\"]').trigger('input');\n                }\n            } else {\n                requestAnimationFrame(checkContentField);\n            }\n        };\n\n        requestAnimationFrame(checkContentField);\n\n        body.off('click', '#add-destination').on('click', '#add-destination', function() {\n            const $last = $('#destination-list .input-group').last();\n            $last.find('.add-dest').trigger('click');\n        });\n\n        body.off('click', '.input-group .add-dest').on('click', '.input-group .add-dest', async function(e) {\n            e.stopImmediatePropagation();\n            let $thisrow = $(this);\n            let $parent = $thisrow.closest('.input-group');\n            let $row = $parent.clone();\n            $row.removeClass('d-none');\n            let currentTime = await self.player.getCurrentTime();\n            $row.find('input.timestamp-input').val(self.convertSecondsToHMS(currentTime));\n            $row.find('.uniqueid').val('');\n            $row.find('.xp').val(0);\n            $row.find('.delete-dest').removeClass('disabled').removeAttr('disabled');\n            $parent.after($row);\n            $parent.find('[type=\"text\"]').trigger('input');\n        });\n\n        body.off('click', '.input-group .delete-dest').on('click', '.input-group .delete-dest', function(e) {\n            e.stopImmediatePropagation();\n            $(this).closest('.input-group').remove();\n            $('.input-group [type=\"text\"]').trigger('input');\n        });\n\n        body.off('click', '.input-group .goto-dest').on('click', '.input-group .goto-dest', async function(e) {\n            e.stopImmediatePropagation();\n            $('#annotation-canvas #badge-preview').remove();\n            const timestamp = $(this).closest('.input-group').find('input.timestamp-input').val();\n            const seconds = self.convertHMSToSeconds(timestamp);\n            const position = $(this).closest('.input-group').find('.positionoption').val();\n            const badgeid = $(this).closest('.input-group').find('.badgeoption').val();\n            const $badge = $(`.rg_badge_item[data-id=\"${badgeid}\"]`).clone();\n            const xp = $(this).closest('.input-group').find('.xp').val();\n            if (xp > 0) {\n                $badge.append(`<small class=\"text-muted\">\n                    ${xp} <sup>${M.util.get_string('xp', 'mod_interactivevideo')}</sup></span>`);\n            }\n            let classes = self.getPosition(position);\n            const currentTime = await self.player.getCurrentTime();\n            if (currentTime != seconds) {\n                await self.player.seek(seconds);\n            }\n            $('#annotation-canvas')\n                .append($('<div id=\"badge-preview\" class=\"d-flex h-100 w-100 ' + classes + ' p-2 z-index-1\"></div>')\n                    .append($badge));\n        });\n\n        body.off('contextmenu', '.input-group .timestamp-input')\n            .on('contextmenu', '.input-group .timestamp-input', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                // Get the current time of the video.\n                let currentTime = await self.player.getCurrentTime();\n                $(this).val(self.convertSecondsToHMS(currentTime));\n                $(this).trigger('input');\n            });\n\n        body.on('input', '.input-group :input', function() {\n            let dest = [];\n            $('#destination-list .input-group').each(function() {\n                const badgeid = $(this).find('.badgeoption').val();\n                const xp = $(this).find('.xp').val() || 0;\n                const position = $(this).find('.positionoption').val();\n                const $timestamp = $(this).find('.timestamp-input');\n                const uniqueid = $(this).find('.uniqueid').val();\n                if (uniqueid != \"\" && badgeid != '' && $timestamp.val() && !$timestamp.hasClass('is-invalid')) {\n                    const seconds = self.convertHMSToSeconds($timestamp.val());\n                    dest.push({\n                        badgeid,\n                        xp,\n                        position,\n                        timestamp: seconds,\n                        uniqueid\n                    });\n                }\n            });\n            dest.sort((a, b) => a.timestamp - b.timestamp);\n            // Make sure dest are unique based on timestamps and uniqueid\n            dest = dest.filter((d, i) => {\n                if (i == 0) {\n                    return true;\n                }\n                if (d.timestamp == dest[i - 1].timestamp) {\n                    return false;\n                }\n                if (d.uniqueid == dest[i - 1].uniqueid) {\n                    return false;\n                }\n                return true;\n            });\n            // Total XP.\n            let totalxp = 0;\n            dest.forEach((d) => {\n                totalxp += Number(d.xp);\n            });\n            if (dest.length == 0) {\n                $('form [name=content]').val('');\n                $('form [name=xp]').val(0);\n            } else {\n                $('form [name=content]').val(JSON.stringify(dest));\n                $('form [name=xp]').val(totalxp);\n            }\n        });\n\n        $(document).off('timeupdate.rajabsgames').on('timeupdate.rajabsgames', async function() {\n            // Remove the preview.\n            $('#annotation-canvas #badge-preview').remove();\n\n        });\n\n        return {form, event};\n    }\n\n    /**\n     * Run the interaction\n     * @param {object} annotation The annotation object\n     * @returns {void}\n     */\n    async runInteraction(annotation) {\n        // Dismiss all tooltips.\n        $('.tooltip').remove();\n        await this.player.pause();\n        let self = this;\n        let dest = JSON.parse(annotation.content);\n        dest = dest.filter((d) => {\n            return !self.isSkipped(d.timestamp);\n        });\n\n        if (!self.isEditMode()) {\n            annotation.viewed = true;\n            this.annotations = this.annotations.filter((d) => d.id != annotation.id);\n            this.annotations.push(annotation);\n        }\n\n        if (dest.length == 0) {\n            this.player.play();\n            return;\n        }\n\n        let newannotation = JSON.parse(JSON.stringify(annotation));\n        newannotation.content = JSON.stringify(dest);\n        // We don't need to run the render method every time the content is applied. We can cache the content.\n        if (!self.cache[annotation.id] || self.isEditMode()) {\n            self.cache[annotation.id] = await this.render(newannotation, 'json');\n        }\n        const data = self.cache[annotation.id];\n        let $html = `<div class=\"position-absolute decision text-center mx-auto w-100\">\n            <h5 class=\"pt-5 pb-3 bg-white\" id=\"decision-q\">\n            <i class=\"mb-2 bi bi-signpost-split-fill\" style=\"font-size: 2em\"></i><br>${newannotation.formattedtitle}</h5>`;\n\n        data.forEach((dest, order) => {\n            $html += `<a href=\"javascript:void(0)\" data-timestamp=\"${dest.timestamp}\"\n                 data-order=\"${order}\" class=\"decision-option btn btn-outline-secondary btn-rounded mb-2 d-flex\n                  justify-content-between align-items-center mx-auto\"><span class=\"text-truncate\">${dest.title}</span>\n                  <i class=\"bi bi-chevron-right\"></i></a>`;\n        });\n        $html += '</div>';\n        let $message = $(`<div id=\"message\" style=\"z-index:1005;display:none;\" data-id=\"${annotation.id}\" tabindex=\"0\">\n            <div class=\"modal-body p-0 border\" id=\"content\">${$html}</div></div>`);\n        $('#video-wrapper').find(\"#message\").remove();\n        $('#video-wrapper').append($message);\n\n        $message.fadeIn(300, 'swing', async function() {\n            // Set focus on the #message element\n            $('body').addClass('disablekb');\n            document.querySelector(`#message[data-id='${annotation.id}']`).focus();\n            if (annotation.char1 == 1) {\n                $message.append(`<button class=\"btn btn-secondary btn-rounded position-absolute\"\n                     id=\"close-decision\" style=\"right: 1rem; top: 1rem;\">\n                     ${M.util.get_string('skip', 'local_ivdecision')}\n                     <i class=\"iv-ml-2 bi bi-chevron-right\"></i></button>`);\n            }\n\n            $(document).off('click', '#close-decision').on('click', '#close-decision', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                self.player.play();\n                $('#taskinfo').fadeIn(300);\n                $('[data-region=\"chapterlists\"], #controller').removeClass('no-pointer-events');\n            });\n\n            if (!self.isEditMode()) {\n                $('#taskinfo').fadeOut(300);\n                $('[data-region=\"chapterlists\"], #controller').addClass('no-pointer-events');\n            }\n            await self.player.pause();\n        });\n\n        $(document).off('click', `#message[data-id='${annotation.id}'] .decision-option`)\n            .on('click', `#message[data-id='${annotation.id}'] .decision-option`, function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let time = Number($(this).data('timestamp'));\n                if (time < this.start) {\n                    time = this.start;\n                } else if (time > this.end) {\n                    time = this.end;\n                }\n                self.player.seek(time);\n                $(`#message[data-id='${annotation.id}']`).fadeOut(300);\n                self.player.play();\n                $('#taskinfo').fadeIn(300);\n                $('[data-region=\"chapterlists\"], #controller').removeClass('no-pointer-events');\n            });\n    }\n\n    postEditCallback() {\n        // Do not do the default post edit callback.\n    }\n\n    renderEditItem(annotations, listItem, item) {\n        listItem = super.renderEditItem(annotations, listItem, item);\n        listItem.find('[data-editable=\"xp\"]').removeAttr('data-editable');\n        return listItem;\n    }\n}"],"names":["RajabsGames","Base","self","this","isEditMode","isPreviewMode","games","annotations","find","x","type","block","$","ajax","url","M","cfg","wwwroot","method","dataType","data","action","sesskey","courseid","course","badges","content","JSON","parse","progress","cmid","interaction","userid","map","id","gameprogress","length","badgeconfig","badge","isblock","unused","badgedata","badgeid","name","picture","uniqueid","completed","intg2","badgesforstatus","forEach","stringify","push","mine","filter","badgecount","classes","status","Template","render","prepend","append","y","cummulatedXP","Number","xp","incompletedBadges","badgeHTML","$badgeHTML","$el","clone","addClass","attr","util","get_string","html","prop","getPosition","position","document","off","on","async","e","t","originalEvent","detail","time","timestamp","isEmpty","empty","intg3","player","pause","preventDefault","stopImmediatePropagation","bdg","count","removeClass","setTimeout","text","window","fireConfetti","details","completeTime","Date","windowAnno","ANNOS","duration","getTime","newstarttime","timecompleted","hasDetails","toggleCompletion","addNotification","fadeOut","remove","Promise","resolve","gradableitems","hascompletion","totalXp","_ref","reduce","a","b","completedItems","_ref2","earnedXp","_ref3","earned","_ref4","thisItem","_ref5","itemId","completionDetails","completiontime","toLocaleString","reportView","isBS5","toString","Set","completionpercentage","markdone","uid","percentage","g","parseFloat","grademax","toFixed","gradeiteminstance","c","completeditems","completiondetails","annotationtype","token","cm","completionid","contextid","updatestate","Object","keys","extracompletion","success","res","start","end","Audio","play","dispatchEvent","grade","target","response","addAnnotation","coursemodule","startHMS","convertSecondsToHMS","endHMS","timestampassist","title","annotationid","hide","modal","selector","querySelector","decisionform","DynamicForm","form","load","onEditFormLoaded","validateTimestampFieldValue","show","trigger","events","SUBMIT_BUTTON_PRESSED","defaultPrevented","submitFormAjax","addEventListener","SERVER_VALIDATION_ERROR","FORM_SUBMITTED","courseContextId","newAnnotation","annotation","editAnnotation","done","updated","event","body","positions","checkContentField","dest","val","badgeoptions","join","selected","label","d","i","requestAnimationFrame","last","$parent","closest","$row","currentTime","getCurrentTime","removeAttr","after","seconds","convertHMSToSeconds","$badge","seek","each","$timestamp","hasClass","sort","totalxp","isSkipped","viewed","newannotation","cache","$html","formattedtitle","order","$message","fadeIn","focus","char1","postEditCallback","renderEditItem","listItem","item","super"],"mappings":"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"}